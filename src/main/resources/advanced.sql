------------TEST DATA
INSERT INTO REQUESTS (REQUEST_ID, COTTAGE_ID, CHECKIN_DATE, CHECKOUT_DATE, TOTAL_PRICE, CUSTOMER_ID) VALUES (1, 1, '2025-01-01', '2025-01-02', 1, 1);
INSERT INTO REQUESTS (REQUEST_ID, COTTAGE_ID, CHECKIN_DATE, CHECKOUT_DATE, TOTAL_PRICE, CUSTOMER_ID) VALUES (2, 1, '2025-01-01', '2025-01-02', 1, 1);
INSERT INTO REQUESTS (REQUEST_ID, COTTAGE_ID, CHECKIN_DATE, CHECKOUT_DATE, TOTAL_PRICE, CUSTOMER_ID) VALUES (3, 1, '2025-01-01', '2025-01-02', 1, 1);
INSERT INTO REQUEST_APPROVALS (REQUEST_APPROVAL_ID, DATE_CREATED, IS_APPROVED, REQUEST_ID) VALUES (1, SYSDATE, 1, 1);

-- ---------FUNCTIONS  -> IN ORACLE
CREATE OR REPLACE FUNCTION IS_GRADE_GOOD(V_GRADE NUMBER)
RETURN NUMBER
AS
    V_RESULT NUMBER;
BEGIN
    IF V_GRADE > 3 THEN
        V_RESULT := 1;
    ELSE
        V_RESULT := 0;
    END IF;
    RETURN V_RESULT;
END;

CREATE OR REPLACE FUNCTION REQUEST_STATUS(P_REQUEST_ID NUMBER)
RETURN VARCHAR2
AS
    V_EXISTS NUMBER;
    V_IS_APPROVED NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_EXISTS
    FROM REQUEST_APPROVALS
    WHERE REQUEST_ID = P_REQUEST_ID;
    IF V_EXISTS > 0 THEN
       SELECT IS_APPROVED INTO V_IS_APPROVED
       FROM REQUEST_APPROVALS
       WHERE REQUEST_ID = P_REQUEST_ID;

        IF V_IS_APPROVED = 1 THEN
           RETURN 'Accepted';
        ELSE
           RETURN 'Rejected';
        END IF;
    ELSE
        RETURN 'Pending';
    END IF;
END;

-- FUNCTION CHECK
SELECT IS_GRADE_GOOD(5) from dual;
SELECT IS_GRADE_GOOD(3) from dual;

SELECT REQUEST_ID, REQUEST_STATUS(REQUEST_ID) AS STATUS FROM REQUESTS;

-- ---------PROCEDURES
CREATE OR REPLACE PROCEDURE CHANGE_REVIEW (P_REVIEW_ID LONG, P_COTTAGE_ID LONG)
AS
    V_REVIEW NUMBER (4);
BEGIN
    UPDATE REVIEWS
    SET COTTAGE_ID = P_COTTAGE_ID
    WHERE REVIEW_ID = P_REVIEW_ID;
END;

-- PRECODURE CHECK
BEGIN
  CHANGE_REVIEW (1, 3);
END;

-- -- ---------TRIGGERS
CREATE OR REPLACE TRIGGER TG_NEW_PRICE_COTTAGE
after UPDATE OF MIN_PRICE_PER_DAY on COTTAGES FOR EACH ROW
when (new.MIN_PRICE_PER_DAY != old.MIN_PRICE_PER_DAY)
DECLARE
    V_NEW_PRICE COTTAGES.MIN_PRICE_PER_DAY%TYPE;
BEGIN
    V_NEW_PRICE := :new.MIN_PRICE_PER_DAY;
    dbms_output.put_line('new PRICE is ' || V_NEW_PRICE);
END;

CREATE OR REPLACE TRIGGER TG_APPROVAL_DATE
BEFORE INSERT ON REQUEST_APPROVALS
FOR EACH ROW
WHEN (NEW.DATE_CREATED IS NULL)
BEGIN
   :NEW.DATE_CREATED := SYSDATE;
END;

-- TRIGER CHECK
UPDATE COTTAGES
SET MIN_PRICE_PER_DAY = 200
WHERE COTTAGE_ID = 2;

INSERT INTO REQUEST_APPROVALS (REQUEST_APPROVAL_ID, IS_APPROVED, REQUEST_ID) VALUES (3, 1, 3);
SELECT DATE_CREATED FROM REQUEST_APPROVALS WHERE REQUEST_APPROVAL_ID = 3;

-- -- ---------CURSORS
DROP PROCEDURE SHOW_AVG_PRICE_PER_USER;
CREATE OR REPLACE PROCEDURE SHOW_AVG_PRICE_PER_USER
IS
    CURSOR USER_CURSOR IS
        SELECT AVG(MIN_PRICE_PER_DAY) AS AVG_PRICE, OWNER_ID
        FROM COTTAGES
        GROUP BY OWNER_ID;

    USER_RECORD USER_CURSOR%ROWTYPE;

BEGIN
    -- OPEN USER_CURSOR;

    FOR USER_RECORD IN USER_CURSOR LOOP
        DBMS_OUTPUT.PUT_LINE('OWNER ID: ' || USER_RECORD.OWNER_ID ||
            ' AVG PRICE: ' || USER_RECORD.AVG_PRICE);
    END LOOP;
    -- CLOSE USER_CURSOR;
END SHOW_AVG_PRICE_PER_USER;

CREATE OR REPLACE PROCEDURE SHOW_AVG_GRADE
IS
    CURSOR AVERAGE_GRADE_CR IS
        SELECT c.NAME, AVG(r.GRADE) AS AVG_GRADE
        FROM COTTAGES c
        JOIN REVIEWS r ON c.COTTAGE_ID = r.COTTAGE_ID
        GROUP BY c.NAME
        ORDER BY AVG_GRADE DESC;

    V_NAME VARCHAR2(20);
    V_AVG_GRADE NUMBER;
BEGIN
    OPEN AVERAGE_GRADE_CR;
    LOOP
        FETCH AVERAGE_GRADE_CR INTO V_NAME, V_AVG_GRADE;
        EXIT WHEN AVERAGE_GRADE_CR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Cottage: ' || V_NAME || ' - Average Grade: ' || V_AVG_GRADE);
    END LOOP;

    CLOSE AVERAGE_GRADE_CR;
END SHOW_AVG_GRADE;

-- CHECK CURSOR
EXEC SHOW_AVG_PRICE_PER_USER;

BEGIN
    SHOW_AVG_GRADE;
END;

-- TESTS
SELECT COUNT(*), CITIES.NAME FROM COTTAGES
    JOIN ADDRESSES USING (ADDRESS_ID)
    LEFT JOIN CITIES USING (CITY_ID)
GROUP BY CITIES.NAME
HAVING COUNT(*) < 2;

SELECT c.NAME, COUNT(r.REQUEST_ID) REQUEST_COUNT, COUNT(ra.REQUEST_APPROVAL_ID) APPROVED_COUNT
FROM COTTAGES c
LEFT JOIN REQUESTS r ON c.COTTAGE_ID = r.COTTAGE_ID
LEFT JOIN REQUEST_APPROVALS ra ON r.REQUEST_ID = ra.REQUEST_ID AND ra.IS_APPROVED = 1
GROUP BY c.NAME
ORDER BY REQUEST_COUNT DESC;

------------TEST DATA TERMINATED
DELETE FROM REQUEST_APPROVALS WHERE REQUEST_APPROVAL_ID in (1, 2, 3);
DELETE FROM REQUESTS WHERE REQUEST_ID IN (1, 2, 3);