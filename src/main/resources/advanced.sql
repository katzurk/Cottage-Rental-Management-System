-- ---------FUNCTIONS  -> IN ORACLE
CREATE OR REPLACE FUNCTION IS_GRADE_GOOD(V_GRADE NUMBER)
RETURN NUMBER
AS
    V_RESULT NUMBER;
BEGIN
    IF V_GRADE > 3 THEN
        V_RESULT := 1;
    ELSE
        V_RESULT := 0;
    END IF;
    RETURN V_RESULT;
END;

-- FUNCTION CHECK
SELECT IS_GRADE_GOOD(5) from dual;
SELECT IS_GRADE_GOOD(3) from dual;

-- ---------PROCEDURES
CREATE OR REPLACE PROCEDURE CHANGE_REVIEW (P_REVIEW_ID LONG, P_COTTAGE_ID LONG)
AS
    V_REVIEW NUMBER (4);
BEGIN
    UPDATE REVIEWS
    SET COTTAGE_ID = P_COTTAGE_ID
    WHERE REVIEW_ID = P_REVIEW_ID;
END;

-- PRECODURE CHECK
BEGIN
  CHANGE_REVIEW (1, 3);
END;

-- -- ---------TRIGGERS
CREATE OR REPLACE TRIGGER TG_NEW_PRICE_COTTAGE
after UPDATE OF MIN_PRICE_PER_DAY on COTTAGES FOR EACH ROW
when (new.MIN_PRICE_PER_DAY != old.MIN_PRICE_PER_DAY)
DECLARE
    V_NEW_PRICE COTTAGES.MIN_PRICE_PER_DAY%TYPE;
BEGIN
    V_NEW_PRICE := :new.MIN_PRICE_PER_DAY;
    dbms_output.put_line('new PRICE is ' || V_NEW_PRICE);
END;

-- TRIGER CHECK
UPDATE COTTAGES
SET MIN_PRICE_PER_DAY = 200
WHERE COTTAGE_ID = 2;

-- -- ---------CURSORS
DROP PROCEDURE SHOW_AVG_PRICE_PER_USER;
CREATE OR REPLACE PROCEDURE SHOW_AVG_PRICE_PER_USER
IS
    CURSOR USER_CURSOR IS
        SELECT AVG(MIN_PRICE_PER_DAY) AS AVG_PRICE, OWNER_ID
        FROM COTTAGES
        GROUP BY OWNER_ID;

    USER_RECORD USER_CURSOR%ROWTYPE;

BEGIN
    -- OPEN USER_CURSOR;

    FOR USER_RECORD IN USER_CURSOR LOOP
        DBMS_OUTPUT.PUT_LINE('OWNER ID: ' || USER_RECORD.OWNER_ID ||
            ' AVG PRICE: ' || USER_RECORD.AVG_PRICE);
    END LOOP;
    -- CLOSE USER_CURSOR;
END SHOW_AVG_PRICE_PER_USER;

-- CHECK CURSOR
EXEC SHOW_AVG_PRICE_PER_USER;

-- TESTS
SELECT COUNT(*), CITIES.NAME FROM COTTAGES
    JOIN ADDRESSES USING (ADDRESS_ID)
    LEFT JOIN CITIES USING (CITY_ID)
GROUP BY CITIES.NAME
HAVING COUNT(*) < 2;